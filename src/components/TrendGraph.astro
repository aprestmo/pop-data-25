---
// Type definitions for polling data
interface PollingData {
  Ap?: number;
  SV?: number;
  R?: number;
  Sp?: number;
  V?: number;
  KrF?: number;
  H?: number;
  Frp?: number;
  A?: number;
  MDG?: number;
  mnd: number;
  yr: number;
}

// Import utilities
import { getPartyColor } from "../utils/partyColors";
import { partyNames } from "../utils/partyNames";

// Format date for display
function formatDate(month: number, year: number): string {
  const fullYear = 2000 + year;
  const date = new Date(fullYear, month - 1);
  return date.toLocaleDateString("no-NO", { month: "short", year: "numeric" });
}

// Create date string for sorting
function createDateString(month: number, year: number): string {
  const fullYear = 2000 + year;
  return `${fullYear}-${month.toString().padStart(2, "0")}`;
}

// Fetch data from the Norwegian election polling API
const response = await fetch("https://pop.dngroup.io/stortingsvalg-snitt");
const data: PollingData[] = await response.json();

// Filter data from September 2021 onwards (mnd 9, yr 21)
const filteredData = data.filter((item: PollingData) => {
  const itemDate = createDateString(item.mnd, item.yr);
  const startDate = "2021-09";
  return itemDate >= startDate;
});

// Sort data by date (oldest first for the graph)
const sortedData = filteredData.sort((a: PollingData, b: PollingData) => {
  const dateA = createDateString(a.mnd, a.yr);
  const dateB = createDateString(b.mnd, b.yr);
  return dateA.localeCompare(dateB);
});

// Prepare data for the graph - both full period and 2025 only
const fullPeriodData = sortedData.map((item: PollingData) => ({
  date: formatDate(item.mnd, item.yr),
  fullDate: createDateString(item.mnd, item.yr),
  ...item,
}));

const year2025Data = sortedData
  .filter((item: PollingData) => item.yr === 25)
  .map((item: PollingData) => ({
    date: formatDate(item.mnd, item.yr),
    fullDate: createDateString(item.mnd, item.yr),
    ...item,
  }));

// Get all available parties from the data
const availableParties = Object.keys(partyNames).filter((party) =>
  sortedData.some(
    (item) =>
      item[party as keyof PollingData] !== undefined &&
      item[party as keyof PollingData] !== 0
  )
);
---

<div class="trend-container">
  <h1>Oppslutning over tid</h1>
  <p>
    Velg ett eller flere partier for å se hvordan støtten i befolkningen har
    endret seg.
  </p>

  <!-- Time period selection -->
  <div class="period-selection">
    <label for="periodSelect" class="period-label">Tidsperiode:</label>
    <select id="periodSelect" class="period-select">
      <option value="full">Siste 4 år</option>
      <option value="2025">2025</option>
    </select>
  </div>

  <!-- Party selection checkboxes -->
  <div class="party-selection">
    <h3>Velg partier å vise:</h3>
    <div class="checkbox-grid">
      {
        availableParties.map((party) => (
          <label class="checkbox-item">
            <input
              type="checkbox"
              checked
              data-party={party}
              class="party-checkbox"
            />
            <span
              class="checkbox-custom"
              style={`--party-color: oklch(${getPartyColor(party)})`}
            />
            <span class="party-label">{partyNames[party]}</span>
          </label>
        ))
      }
    </div>
  </div>

  <!-- Graph container -->
  <div class="graph-container">
    <canvas id="trendChart" width="800" height="400"></canvas>
  </div>
</div>

<!-- Hidden data elements to pass data to client script -->
<div
  id="fullPeriodData"
  data-graph-data={JSON.stringify(fullPeriodData)}
  style="display: none;"
>
</div>
<div
  id="year2025Data"
  data-graph-data={JSON.stringify(year2025Data)}
  style="display: none;"
>
</div>

<script>
  // Chart.js for the graph
  import Chart from "chart.js/auto";
  import { getPartyColor } from "../utils/partyColors";
  import { partyNames } from "../utils/partyNames";

  // Get the graph data from the hidden elements
  const fullPeriodElement = document.getElementById("fullPeriodData");
  const year2025Element = document.getElementById("year2025Data");
  const fullPeriodData = fullPeriodElement
    ? JSON.parse(fullPeriodElement.getAttribute("data-graph-data") || "[]")
    : [];
  const year2025Data = year2025Element
    ? JSON.parse(year2025Element.getAttribute("data-graph-data") || "[]")
    : [];

  // Create datasets for each party
  function createDatasets(selectedParties: string[], graphData: any[]) {
    return selectedParties.map((party) => ({
      label: partyNames[party],
      data: graphData.map((item: any) => item[party] || null),
      borderColor: `oklch(${getPartyColor(party)})`,
      backgroundColor: `oklch(${getPartyColor(party)} / 0.2)`,
      borderWidth: 2,
      fill: false,
      tension: 0.4,
      pointRadius: 3,
      pointHoverRadius: 6,
    }));
  }

  // Initialize chart
  let chart: Chart | null = null;

  function initializeChart() {
    const canvas = document.getElementById("trendChart") as HTMLCanvasElement;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // Get initially selected parties (all checked by default)
    const checkboxes = document.querySelectorAll(
      ".party-checkbox:checked"
    ) as NodeListOf<HTMLInputElement>;
    const selectedParties = Array.from(checkboxes)
      .map((checkbox) => checkbox.dataset.party!)
      .filter(Boolean);

    // Get initial period selection
    const periodSelect = document.getElementById(
      "periodSelect"
    ) as HTMLSelectElement;
    const currentData =
      periodSelect.value === "2025" ? year2025Data : fullPeriodData;

    chart = new Chart(ctx, {
      type: "line",
      data: {
        labels: currentData.map((item: any) => item.date),
        datasets: createDatasets(selectedParties, currentData),
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          title: {
            display: false,
          },
          legend: {
            display: false,
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            max: 35,
            title: {
              display: true,
              text: "Prosent (%)",
            },
          },
          x: {
            title: {
              display: true,
              text: "Dato",
            },
          },
        },
        interaction: {
          intersect: false,
          mode: "index",
        },
      },
    });
  }

  // Update chart when checkboxes or period selection changes
  function updateChart() {
    if (!chart) return;

    const checkboxes = document.querySelectorAll(
      ".party-checkbox:checked"
    ) as NodeListOf<HTMLInputElement>;
    const selectedParties = Array.from(checkboxes)
      .map((checkbox) => checkbox.dataset.party!)
      .filter(Boolean);

    const periodSelect = document.getElementById(
      "periodSelect"
    ) as HTMLSelectElement;
    const currentData =
      periodSelect.value === "2025" ? year2025Data : fullPeriodData;

    chart.data.labels = currentData.map((item: any) => item.date);
    chart.data.datasets = createDatasets(selectedParties, currentData);
    chart.update();
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    // Initialize chart
    initializeChart();

    // Add checkbox event listeners
    document.querySelectorAll(".party-checkbox").forEach((checkbox) => {
      checkbox.addEventListener("change", updateChart);
    });

    // Add period select event listener
    const periodSelect = document.getElementById("periodSelect");
    if (periodSelect) {
      periodSelect.addEventListener("change", updateChart);
    }
  });
</script>

<style>
  .trend-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      sans-serif;
  }

  h1 {
    color: #333;
    text-align: center;
    margin-bottom: 10px;
  }

  .subtitle {
    text-align: center;
    color: #666;
    margin-bottom: 30px;
    font-size: 1.1em;
  }

  .period-selection {
    background: white;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .period-label {
    font-weight: 500;
    color: #333;
    font-size: 1em;
  }

  .period-select {
    padding: 8px 12px;
    border: 2px solid #ddd;
    border-radius: 6px;
    font-size: 1em;
    background: white;
    color: #333;
    cursor: pointer;
    transition: border-color 0.2s ease;
  }

  .period-select:focus {
    outline: none;
    border-color: #0066cc;
  }

  .period-select:hover {
    border-color: #0066cc;
  }

  .party-selection {
    background: white;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .party-selection h3 {
    margin-top: 0;
    margin-bottom: 15px;
    color: #333;
  }

  .checkbox-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 12px;
  }

  .checkbox-item {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: 8px;
    border-radius: 6px;
    transition: background-color 0.2s ease;
  }

  .checkbox-item:hover {
    background-color: #f8f9fa;
  }

  .checkbox-item input[type="checkbox"] {
    display: none;
  }

  .checkbox-custom {
    width: 18px;
    height: 18px;
    border: 2px solid #ddd;
    border-radius: 3px;
    margin-right: 10px;
    position: relative;
    transition: all 0.2s ease;
  }

  .checkbox-item input[type="checkbox"]:checked + .checkbox-custom {
    background-color: var(--party-color);
    border-color: var(--party-color);
  }

  .checkbox-item input[type="checkbox"]:checked + .checkbox-custom::after {
    content: "✓";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  .party-label {
    font-size: 0.9em;
    color: #333;
  }

  .graph-container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    height: 500px;
  }

  @media (max-width: 768px) {
    .trend-container {
      padding: 10px;
    }

    .period-selection {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }

    .checkbox-grid {
      grid-template-columns: 1fr;
    }

    .graph-container {
      height: 400px;
    }
  }
</style>
