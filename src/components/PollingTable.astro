---
// Type definitions for polling data
interface PollingData {
  Ap?: number;
  SV?: number;
  R?: number;
  Sp?: number;
  V?: number;
  KrF?: number;
  H?: number;
  Frp?: number;
  A?: number;
  MDG?: number;
  mnd: number;
  yr: number;
}

// Party names mapping (Norwegian political parties)
const partyNames: Record<string, string> = {
  'Ap': 'Arbeiderpartiet',
  'SV': 'Sosialistisk Venstreparti',
  'R': 'Rødt',
  'Sp': 'Senterpartiet',
  'V': 'Venstre',
  'KrF': 'Kristelig Folkeparti',
  'H': 'Høyre',
  'Frp': 'Fremskrittspartiet',
  'A': 'Andre',
  'MDG': 'Miljøpartiet De Grønne'
};

// Party colors for styling
const partyColors: Record<string, string> = {
  'Ap': '#E31837',
  'SV': '#C91D3E',
  'R': '#FF0000',
  'Sp': '#00A651',
  'V': '#0066CC',
  'KrF': '#FFCC00',
  'H': '#0066CC',
  'Frp': '#0066CC',
  'A': '#999999',
  'MDG': '#00A651'
};

// Format date
function formatDate(month: number, year: number): string {
  // Convert 2-digit year to 4-digit year (8 -> 2008, 25 -> 2025)
  const fullYear = 2000 + year;
  const date = new Date(fullYear, month - 1);
  return date.toLocaleDateString('no-NO', { month: 'long', year: 'numeric' });
}

// Fetch data from the Norwegian election polling API
const response = await fetch('https://pop.dngroup.io/stortingsvalg-snitt');
const data: PollingData[] = await response.json();

// Sort data by date (newest first)
const sortedData = data.sort((a: PollingData, b: PollingData) => {
  if (a.yr !== b.yr) return b.yr - a.yr;
  return b.mnd - a.mnd;
});

// Get the most recent data for summary
const latestData = sortedData[0];
---

<div class="polling-container">
  <h1>Norske Stortingsvalg - Målinger</h1>
  
  <!-- Summary of latest polling -->
  <div class="summary">
    <h2>Siste måling: {formatDate(latestData.mnd, latestData.yr)}</h2>
    <div class="party-summary">
      {Object.entries(partyNames).map(([abbr, name]) => {
        const percentage = latestData[abbr as keyof PollingData];
        if (percentage === undefined || percentage === 0) return null;
        return (
          <div class="party-item" style={`--party-color: ${partyColors[abbr]}`}>
            <span class="party-name">{name}</span>
            <span class="party-percentage">{percentage.toFixed(1)}%</span>
          </div>
        );
      })}
    </div>
  </div>

  <!-- Historical data table -->
  <div class="table-container">
    <h2>Historisk utvikling</h2>
    <table class="polling-table">
      <thead>
        <tr>
          <th>Dato</th>
          {Object.entries(partyNames).map(([abbr, name]) => (
            <th style={`--party-color: ${partyColors[abbr]}`}>
              <div class="party-header">
                <span class="party-abbr">{abbr}</span>
                <span class="party-full">{name}</span>
              </div>
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {sortedData.map((row: PollingData) => (
          <tr>
            <td class="date-cell">{formatDate(row.mnd, row.yr)}</td>
            {Object.keys(partyNames).map(abbr => {
              const percentage = row[abbr as keyof PollingData];
              if (percentage === undefined || percentage === 0) {
                return <td class="empty-cell">-</td>;
              }
              return (
                <td class="percentage-cell" style={`--party-color: ${partyColors[abbr]}`}>
                  {percentage.toFixed(1)}%
                </td>
              );
            })}
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</div>

<style>
  .polling-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  h1 {
    color: #333;
    text-align: center;
    margin-bottom: 30px;
  }

  h2 {
    color: #555;
    margin-bottom: 20px;
  }

  .summary {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
  }

  .party-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
  }

  .party-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    background: white;
    border-radius: 6px;
    border-left: 4px solid var(--party-color);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .party-name {
    font-weight: 500;
    color: #333;
  }

  .party-percentage {
    font-weight: bold;
    color: var(--party-color);
    font-size: 1.1em;
  }

  .table-container {
    overflow-x: auto;
  }

  .polling-table {
    width: 100%;
    border-collapse: collapse;
    background: white;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    border-radius: 8px;
    overflow: hidden;
  }

  .polling-table th {
    background: #f8f9fa;
    padding: 15px 10px;
    text-align: center;
    font-weight: 600;
    color: #333;
    border-bottom: 2px solid #dee2e6;
    position: sticky;
    top: 0;
    z-index: 10;
  }

  .polling-table td {
    padding: 12px 10px;
    text-align: center;
    border-bottom: 1px solid #dee2e6;
  }

  .date-cell {
    font-weight: 500;
    color: #666;
    text-align: left;
    min-width: 120px;
  }

  .percentage-cell {
    font-weight: 500;
    color: var(--party-color);
  }

  .empty-cell {
    color: #ccc;
  }

  .party-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 4px;
  }

  .party-abbr {
    font-weight: bold;
    color: var(--party-color);
    font-size: 1.1em;
  }

  .party-full {
    font-size: 0.8em;
    color: #666;
    text-align: center;
    line-height: 1.2;
  }

  @media (max-width: 768px) {
    .polling-container {
      padding: 10px;
    }
    
    .party-summary {
      grid-template-columns: 1fr;
    }
    
    .party-header .party-full {
      display: none;
    }
    
    .polling-table th,
    .polling-table td {
      padding: 8px 6px;
      font-size: 0.9em;
    }
  }
</style> 